[ 셀렉터 ] ~ getElementById

- document.getElementById('hello').innerHTML = '안녕';

=> html문서의 id가 hello인 요소를 찾아와 그거의 내부 html을 '안녕'으로
=> 등호 : 오른쪽을 왼쪽에 넣으라는 뜻
=> html의 모든 것을 바꿀수있음 ( class, style, href 등등 수백개라 찾아서 쓰는게 좋음 )

Q. 왜이렇게 길게 코드짜야함?

- 프로그래밍은 컴퓨터에게 일시키는 행위
- 사람한테 시키는것처럼 시키면 안됨 ( 저기가서 저것좀해라 X .)
- 하나하나 상세하게 설명해야함.
- 개발자들이 이상한 이유

-----------------------------------------------------------------------------------


[ 동적 UI 만드는 스텝 (Alert 박스 만들기) ]

- UI 만드는 step

1. HTML/CSS로 미리 디자인 ( 필요하면 미리 디자인 )

.alert-box {
    background-color: skyblue;
    padding: 20px;
    color: aliceblue;
    border-radius: 5px;
    display: none; <<<<< 숨기자
}

~ 숨기고싶다? => display : none; 보여주고싶다? => display : block;

2. 필요할 때 보여달라고 코드 짬 ( 자바스크립트로 )

<button onclick='document.getElementById("alert-box").style.display = "block"'>버튼</button>

~ <button onclick="버튼클릭하면 이 코드 실행해줌~">버튼</button>


-------------------------------------------------------------------------------------

[ 자바스크립트 function 문법 사용법 ]

- (팁) 자동완성 활용을 많이하셈
- 긴 코드를 짧은 단어로 축약하는 법 => function 문법

- function 문법 : function 작명 () {}

~ function 알림창열기() {
            document.getElementById("alert-box").style.display = "block"
    }
~ function작명은 구체적인게 좋음
~ 함수명 영어작명 관습은 1.소문자 시작 2. camelCase
~ 긴 코드 재사용이 잦을때도 편리
~ function 용도 2개나 더 있음 ㄷㄷ

- 자주 겪는 에러

1. 조작할 html의 하단에 코드를 짜야 잘됨
2. 셀렉터 오타 주의
3. 그냥 기본문법 오타

--------------------------------------------------------------------------------------

[ function의 파라미터 문법 ]

- function에 구멍뚫기

~ function openAlert(구멍) {
            document.getElementById("alert-box").style.display = 구멍;
}

~ openAlert('안녕') => 구멍에 '안녕' 넣어서 openAlert 안의 코드 실행해주셈
~ openAlert('바보') => 구멍에 '바보' 넣어서 openAlert 안의 코드 실행해주셈

- 구멍을 뚫어놓으면 함수 하나로 다양한 코드 실행이 가능해짐
- 비슷한 함수가 많으면 가변적인 부분에 구멍을 뚫어보셈

- 이제 구멍은 앞으로 파라미터.
- function, 파라미터는 필수 문법이 아니다. 편의를 위함일 뿐

- 예시
function plus() {
            2 + 1;
        }

        function plus2() {
            2 + 2;
        }

        function plus3() {
            2 + 3;
        }

function plus(구멍) {
            2 + 구멍;
        }

        plus(1)
        plus(2)
        plus(3)

- 파라미터 작명은 아무렇게나 가능, 여러개 파라미터 사용 가능
- id로 찾기 귀찮으면? class로 찾기 가능
- getElementByClassName()
- id는 중복허용 안되는데 class는 중복이 돼서 뒤에 인덱스 붙여야함
-- getElementByClassName('title1')[0] : 클래스명이 title1인 요소중 제일 처음것 

----------------------------------------------------------------------------------------

[ 자바스크립트 이벤트 리스터 ]
- addEventListener() : 이거 쓰면 onclick 필요없음
-document.getElementById('close').addEventListener('click', function(){
            코드~
 }) : close id를 click하면 function이 실행됨

-event가 뭐냐면 : 클릭, 키입력, 스크롤, 드래그 등등
- click, scroll, keydown, mouseover 등등

-------------------------------------------------------------------------------------------

[ 서브메뉴 만들어보기와 classList 다루기 ]

1. 미리 서브메뉴를 html css로 디자인
2. js로 띄우기
- display : none/block으로 조절했는데 class 탈부착으로도 구현가능
- 장점 : 애니메이션 추가 쉬움, 나중에 재사용편리
- 클래스 추가하는법
: document.getElementsByClassName('list-group')[0].classList.add('show');

Q. 버튼 한 번 더 누르면 숨기기? 
- 버튼 짝수번 누르면 제거해주셈~
- 버튼누를때 show가 있으면 제거해주셈~
-document.getElementsByClassName('list-group')[0].classList.toggle('show');
- toggle : show가 있으면 제거, 없으면 추가하라는 뜻

- 셀렉터들 : getElementById(), getElementsByClassName(), querySelector(), querySelectorAll()
- querySelector() 
: document.querySelector('.list-group'). id로 찾을때는 document.querySelector('#test1') 이런식
: 맨위에 나오는 한개만 찾아줌
: 다찾아주는게  querySelectorAll() -> 그래서 인덱싱 필요함

-----------------------------------------------------------------------------------------------------

[ jQuery 사용법 ]

- HTML 조작문법을 쉽게 바꿔주는 라이브러리들 : jQuery, React, Vue 등
- 모든 자바스크립트 라이브러리는 <body> 끝나기 전에 넣는거 권장

Q. <p> 내부 글자를 '바보'로 변경하려면?

     <p class = "hello"> 안녕 </p>

- 원래라면 document.querySelector('.hello').innerHTML = '바보';
- jQuery설치시 쓸수 있는 querySelector => $
- jQuery에서 쓸수있는 html 내용 바꾸기 -> .html
- $('.hello').html('바보');
- css 바꿀때는? : $('.hello').css('color','red');
- class탈부착은? : $('.hello').addClass('show')
- class제거는? : $('.hello').removeClass('show')
- class 토글은? : $('.hello').toggleClass('show')

Q. <p> 3개를 전부 '바보'로 바꾸려면?

    <p class = "hello"> 안녕 </p>
    <p class = "hello"> 안녕 </p>
    <p class = "hello"> 안녕 </p>

- document.querySelectorAll('.hello')[0].innerHTML = '바보';
   document.querySelectorAll('.hello')[1].innerHTML = '바보';
   document.querySelectorAll('.hello')[2].innerHTML = '바보';

- $('.hello').html('바보'); => 전부 다 찾아준다 ㄷㄷ

Q. 이벤트 리스너는?

    <button id = "test-btn">버튼</button>

-document.querySelector('#test-btn').addEventListener() 여기서

- $('#test-btn').on('click', function(){  }) => .on으로 바뀜


- $('셀렉터') 로 찾으면 jQuery함수만 붙일 수 있음


----------------------------------------------------------------------------------------------------

[ 모달창 만들기와 간단한 애니메이션 ]

- UI에 애니메이션 추가하려면 : 가능하면 CSS만으로 처리하는게 좋음 (성능 때문)

- one-way UI 애니메이션 만드는법 ( a상태 -> b상태 )
1. 시작스타일 2. 최종스타일 3. 원할때 최종스타일로 변하라고 코드 짬 4. 시작 스타일에 transition 추가

- 애니메이션 줄때는 display:none 보다 visibility: hidden을 사용
- display는 html에서 아예 없애는거, visibility는 모습만 숨기는거

----------------------------------------------------------------------------------------------------

[ 폼 만들며 배워보는 if else ]

- form 안에 button 주의 : 전송은 무조건 type = "submit" 닫기는 type="button"을 해야 에러가없음
- form은 서버로 유저정보 전송하려고 쓰는 것임
- 전송버튼 누를때 첫째 <input>에 입력된게 없으면 alert 띄우기

- 폼 전송 막으려면 e.preventDefault()


----------------------------------------------------------------------------------------------------

[ input, change 이벤트와 and, or 연산자 ]


- <input> 에서 발생하는 이벤트들 : input, change
- <input>에서 일어나는 input 이벤트
: document.getElementById('email').addEventListener('input'l,function(){})
: document.getElementById('email') 여기에 유저가 입력한 값이 변할 때마다 실행됨

-change 이벤트는 <input>에 입력한 값이 바뀌고 포커스를 잃을 때 발생

--------------------------------------------------------------------------------------------------

[ 변수 문법과 Dark mode 버튼만들기 ]

- 자료 잠깐 저장하는 변수 문법 
: var 변수명 = 넣을자료;

- 변수 왜쓰는데
1. 길고 복잡한 자료들 저장가능
2. 특정값을 기억하게 만들고 싶으면

- 모든 자료 다 넣을수있음

- bootstrap UI 들은 스타일 바꾸려면 class명 수정해야함

- 변수의 선언, 할당, 범위 : var 이름 = 'kim';


- 선언 : var 이름;
- 할당 : 이름 = 'kim';
- 재할당 : 이름 = 'park';

- 범위 
: 함수 안에서 변수를 만들면 사용가능 범위는 함수 내부
: 함수 바깥에서 만든 변수는 함수 안에서 사용가능
: var let const

- var let const 차이
: var => 재선언 가능, 재할당 가능. 범위 function
: let => 재선언 불가능. 재할당 가능 . 범위 {}
: const => 재선언 불가능. 재할당 불가능 (변하면 안되는 값 보관좋음) . 범위 {}

-----------------------------------------------------------------------------------------------------

[setTimeout 타이머 주는법 ]

- X초 후 코드를 실행하려면 : setTimeout ( function () { 실행할코드 } , ms )

- X초 마다 코드실행하려면 : setInterval ( function () { 실행할코드 } , ms )

- if var function => 자바스크립트 문법

- document.querySelector() , setTimeout() , alert() => 브라우저 사용법 => web browserAPI 라고함

- 자바스크립트문법과 브라우저 사용법은 다른것

- 콜백함수 자리엔 만들어둔 함수 넣을 수 있음

        setTimeout(함수, 1000)

        function 함수() {
            console.log('안녕');
        }

------------------------------------------------------------------------------------------------------

[ 정규식으로 이메일 형식 검증해보기 ]

- 유저가 입력한게 이메일형식인지 검사? => 정규식 쓰면 가능

- 문자 검사하는 쉬운 방법 -> 'abc'.includes('a') => 한글이 들어있냐 영어가들어있냐 숫자가 1회 출현하냐이런건 못함

- 정규식 : /a/.test('abcde')

- 장점 : /[a-z]/.test('abcde')  => 문자범위지정가능 ( a부터 z중 아무글자 1개)
- /[ㄱ-ㅎ가-힣]/.test('ㅋㅋㅋㅋ') -> 한글이 들어있는지
- /[\S]/.test('ㅋㅋㅋㅋ') -> 아무 문자 1개
- /[^a ]/.test('ㅋㅋㅋㅋ') -> 시작문자

- 이메일 형식 검사는? : /\S@\S\.\S/.test('aaa@bbb.ccc') -> \S는 글자 1개만 검사해서 false 뜰듯
- /\S+@\S+\.\S+/.test('aaa@bbb.ccc') -> + 왼쪽문자 반복검색

---------------------------------------------------------------------------------------------------------

[ 코드 3줄로 캐러셀 (이미지 슬라이드) 만들기 ]

- 브라우저 폭 == 100vw
- tarnsform: translateX(-100vw) -> margin-left 보다 부드러움

-----------------------------------------------------------------------------------------------------------


[ 코드 3줄로 캐러셀 (이미지 슬라이드) 만들기2 ]


- 다음버튼 기능 만들기 : 1번 보고있으면 2번 보여주셈. 2번 보고있으면 3번 보여주셈.

- 응용 : 사진이 갑자기 4개? 사진 더 넣을때마다 js코드 또 수정해야함

- 사진이 늘어나도 잘 되는 확장성 좋은 다음버튼 만들기

-----------------------------------------------------------------------------------------------------------

[ 함수의 return 문법 & 소수점 다루기 ]

- function 문법 : 1. 긴 코드 축약해서 쓸수있음. 2. 파라미터 추가기능. 3. return

- 함수 쓰고 그 자리에 뭔가 뱉고싶으면 return

- function 함수 () { return 123 } => 123 뱉음 -> 수학시간 함수랑 같음

- return 용도가 뭐임 : 자료를 넣으면 다른 자료가 나오는 변환기를 만들고 싶을때

- 쇼핑몰을 만든다고 칠때 : 가격 , 부가세를 표시해주고싶을때. 부가세 계산 함수

- 자바스크립트에서 소수점 있는 숫자연산시 주의점 // 아주작은 오차발생
=> 1.1 + 0.3 =. 1.40000000000001 ( 무시해도됨 )

- 소수점 반올림 하는법 : 숫자.toFixed(몇자리) => (1.1 * 0.3 ).toFixed(2) => 이거 쓰면 문자로 변환됨 parseInt 같은걸로 변환해주셈

- 몇자리 안쓰면 그냥 반올림

- 자바스크립트 + 연산자 특징 : '문자' + 123 => '문자123' , '문자' + '문자' => '문자문자'

============================================================================

[ 스크롤 이벤트로 만드는 재밌는 기능들 ]

- 스크롤 바 끝까지 내리면 상품을 더 보여주세요~

- 스크롤바 내리면 로고 작게 만들기

- window.addEventListener('scroll',function(){ })

- window가 스크롤 될때마다 function코드 실행해줌

- window 안에 document 안에 div 있는 구조

- 유저가 얼마나 스크롤바를 내렸나? => window.scrollY

- 호환성 좋게 쓰고싶으면 window.pageYOffset

- 강제로 스크롤하기 window.scrollTo(x,y)

- bootstrap 사용하면 스크롤을 부드럽게 처리해줌

- :root {
    scroll-behavior: auto;
} => 이거 추가하면 원상복구됨

- $(window).on('scroll', function(){
    $(window).scrollTop()  => 현재 스크롤바위치 출력
})

- <div> 스크롤바 내린 높이 : 셀렉터.scrollTop
- <div> 실제 높이  : 셀렉터.scrollHeight
- 스크롤바 다 내렸다고 div실제높이랑 같지않음. 스크롤바 내린양 + div 높이 == div의 실제높이
- 눈에보이는 div박스 높이 : 셀렉터.clientHeight

- scroll 이벤트리스너 안의 코드는 1초에 60번이상 실행돼서 많이쓰면 안됨
- 바닥체크도 여러번 중복될듯 => 방지는 고민
- Q. 현재페이지 끝까지 스크롤 체크는? <html>태그의 높이 찾으면됨
- 셀렉터.scrollHeight, clientHeight는 페이지 업로드 다되고 실행해야 정확. <body>끝부분 넣는게 좋음

===========================================================================

[ 탭기능 만들며 배우는 for 반복문 ]

- 버튼,박스3개씩 만들어놓고 버튼누르면 맞는 박스 보여주면 끝

- 한번에 모든걸 구현할 생각 X , 쉬운것 하나부터 O

- $('.tab-button').eq(0).on('click',function(){

})


- for문 안에 i 변수는 let이 국룰

===========================================================================

[ 이벤트 버블링과 이벤트관련 함수들 ]

- 로그인 모달창 뜨고 검은배경 누르면 모달창 닫는기능 만들기

- 모든 브라우저는 이벤트 버블링이 일어남 ( 이벤트가 상위 html로 퍼지는 현상 )

- 유용한 이벤트관련 함수들

- 콜백함수에 매개변수 e 넣으면 사용가능함

- e.target; // 유저가 실제로 누른거
- e.currentTarget; // 이벤트 리스너 달린 곳 == this;
- e.preventDefault(); // 클릭 안한것처럼 해주세요. 이벤트 기본동작 막아줌
- e.stopPropagation(); // 상위요소로 이벤트 버블링 막아줌

- document.querySelector() 결과랑 $() 결과는 다르게 생김

- $(e.target0) == $('.black-bg') : jquery는 이렇게 하는게 안전

============================================================================

[ 이벤트 버블링 응용과 dataset ]

- 함수로 축약할때 축약할 코드에 변수가 있으면 변수를 파라미터로 바꿔야 잘된다.

- 탭기능 다르게 만들기 -> 이벤트 리스너 1개만 쓰기 ( 이벤트리스너 줄어들수록 램성능 좋아짐 )

- 이벤트버블링을 알고있으면 이벤트리스너 많이 필요없음

- html 태그에 몰래 정보숨기기 가능 : data-자료이름 = "값"

- 숨겼던 자료출력 : 셀렉터.dataset.자료이름

===========================================================================

[ Array와 Object 자료형 ]

- 정보가 10개면 변수도 10개 만들거임?
- 변수 하나에 여러자료 저장가능함

- array 자료형 : var car = [자료, 자료2, 자료3];
- array에서 자료를 꺼내려면 car[0] 인덱스 활용
- array 자료 추가/수정하려면 : car[0] = '아반떼'; car[3] = '아반떼';

-object 자료형 : var car2 = {이름1 : 자료1, 이름2 : 자료2}
- 이름붙여서 저장가능한게 장점
- 이름부분을 Key, 자료 부분을 value 라고함. key:value형태로 저장가능한게 장점
- object에서 자료 꺼내려면 car2['price'] or car2.price

- array / object 차이점 : 순서개념
- array는 자료간 순서가 존재 ( 정렬, 자르기 가능 ) . object는 순서개념이 없음 (인덱싱 못함)

===========================================================================

[ 약간 복잡한 Array & Object 데이터바인딩 ]

- object와 array 둘다 안에 아무거나 다 넣을수 있음. object, array도 넣기 가능

- 시작이 {} 면 무조건 object자료형,  [] 면 거의 array

- 개발방식1. 완성된 html파일을 보낸다. ( Server-side rendering ) : 서버가 귀찮다
- 개발방식2. 빈 html파일 + 데이터 ( html 완성은 JS가 하도록 ) ( client-side rendering ) : 서버가 편하다

- 데이터파인딩 쉽게해주는 jQuery, vue 등등..

- 문자 중간에 변수 넣는 법

===========================================================================

[ Select 인풋 다루기 ]

- 셔츠 고르면 <select> 하나 더 보여주기
- <select> 사용법 : <input> 이랑 똑같음
- <select>에서 선택한 정보를 가져오려면?