[ 셀렉터 ] ~ getElementById

- document.getElementById('hello').innerHTML = '안녕';

=> html문서의 id가 hello인 요소를 찾아와 그거의 내부 html을 '안녕'으로
=> 등호 : 오른쪽을 왼쪽에 넣으라는 뜻
=> html의 모든 것을 바꿀수있음 ( class, style, href 등등 수백개라 찾아서 쓰는게 좋음 )

Q. 왜이렇게 길게 코드짜야함?

- 프로그래밍은 컴퓨터에게 일시키는 행위
- 사람한테 시키는것처럼 시키면 안됨 ( 저기가서 저것좀해라 X .)
- 하나하나 상세하게 설명해야함.
- 개발자들이 이상한 이유

-----------------------------------------------------------------------------------


[ 동적 UI 만드는 스텝 (Alert 박스 만들기) ]

- UI 만드는 step

1. HTML/CSS로 미리 디자인 ( 필요하면 미리 디자인 )

.alert-box {
    background-color: skyblue;
    padding: 20px;
    color: aliceblue;
    border-radius: 5px;
    display: none; <<<<< 숨기자
}

~ 숨기고싶다? => display : none; 보여주고싶다? => display : block;

2. 필요할 때 보여달라고 코드 짬 ( 자바스크립트로 )

<button onclick='document.getElementById("alert-box").style.display = "block"'>버튼</button>

~ <button onclick="버튼클릭하면 이 코드 실행해줌~">버튼</button>


-------------------------------------------------------------------------------------

[ 자바스크립트 function 문법 사용법 ]

- (팁) 자동완성 활용을 많이하셈
- 긴 코드를 짧은 단어로 축약하는 법 => function 문법

- function 문법 : function 작명 () {}

~ function 알림창열기() {
            document.getElementById("alert-box").style.display = "block"
    }
~ function작명은 구체적인게 좋음
~ 함수명 영어작명 관습은 1.소문자 시작 2. camelCase
~ 긴 코드 재사용이 잦을때도 편리
~ function 용도 2개나 더 있음 ㄷㄷ

- 자주 겪는 에러

1. 조작할 html의 하단에 코드를 짜야 잘됨
2. 셀렉터 오타 주의
3. 그냥 기본문법 오타

--------------------------------------------------------------------------------------

[ function의 파라미터 문법 ]

- function에 구멍뚫기

~ function openAlert(구멍) {
            document.getElementById("alert-box").style.display = 구멍;
}

~ openAlert('안녕') => 구멍에 '안녕' 넣어서 openAlert 안의 코드 실행해주셈
~ openAlert('바보') => 구멍에 '바보' 넣어서 openAlert 안의 코드 실행해주셈

- 구멍을 뚫어놓으면 함수 하나로 다양한 코드 실행이 가능해짐
- 비슷한 함수가 많으면 가변적인 부분에 구멍을 뚫어보셈

- 이제 구멍은 앞으로 파라미터.
- function, 파라미터는 필수 문법이 아니다. 편의를 위함일 뿐

- 예시
function plus() {
            2 + 1;
        }

        function plus2() {
            2 + 2;
        }

        function plus3() {
            2 + 3;
        }

function plus(구멍) {
            2 + 구멍;
        }

        plus(1)
        plus(2)
        plus(3)

- 파라미터 작명은 아무렇게나 가능, 여러개 파라미터 사용 가능
- id로 찾기 귀찮으면? class로 찾기 가능
- getElementByClassName()
- id는 중복허용 안되는데 class는 중복이 돼서 뒤에 인덱스 붙여야함
-- getElementByClassName('title1')[0] : 클래스명이 title1인 요소중 제일 처음것 

----------------------------------------------------------------------------------------

[ 자바스크립트 이벤트 리스터 ]
- addEventListener() : 이거 쓰면 onclick 필요없음
-document.getElementById('close').addEventListener('click', function(){
            코드~
 }) : close id를 click하면 function이 실행됨

-event가 뭐냐면 : 클릭, 키입력, 스크롤, 드래그 등등
- click, scroll, keydown, mouseover 등등

-------------------------------------------------------------------------------------------

[ 서브메뉴 만들어보기와 classList 다루기 ]

1. 미리 서브메뉴를 html css로 디자인
2. js로 띄우기
- display : none/block으로 조절했는데 class 탈부착으로도 구현가능
- 장점 : 애니메이션 추가 쉬움, 나중에 재사용편리
- 클래스 추가하는법
: document.getElementsByClassName('list-group')[0].classList.add('show');

Q. 버튼 한 번 더 누르면 숨기기? 
- 버튼 짝수번 누르면 제거해주셈~
- 버튼누를때 show가 있으면 제거해주셈~
-document.getElementsByClassName('list-group')[0].classList.toggle('show');
- toggle : show가 있으면 제거, 없으면 추가하라는 뜻

- 셀렉터들 : getElementById(), getElementsByClassName(), querySelector(), querySelectorAll()
- querySelector() 
: document.querySelector('.list-group'). id로 찾을때는 document.querySelector('#test1') 이런식
: 맨위에 나오는 한개만 찾아줌
: 다찾아주는게  querySelectorAll() -> 그래서 인덱싱 필요함

-----------------------------------------------------------------------------------------------------

[ jQuery 사용법 ]

- HTML 조작문법을 쉽게 바꿔주는 라이브러리들 : jQuery, React, Vue 등
- 모든 자바스크립트 라이브러리는 <body> 끝나기 전에 넣는거 권장

Q. <p> 내부 글자를 '바보'로 변경하려면?

     <p class = "hello"> 안녕 </p>

- 원래라면 document.querySelector('.hello').innerHTML = '바보';
- jQuery설치시 쓸수 있는 querySelector => $
- jQuery에서 쓸수있는 html 내용 바꾸기 -> .html
- $('.hello').html('바보');
- css 바꿀때는? : $('.hello').css('color','red');
- class탈부착은? : $('.hello').addClass('show')
- class제거는? : $('.hello').removeClass('show')
- class 토글은? : $('.hello').toggleClass('show')

Q. <p> 3개를 전부 '바보'로 바꾸려면?

    <p class = "hello"> 안녕 </p>
    <p class = "hello"> 안녕 </p>
    <p class = "hello"> 안녕 </p>

- document.querySelectorAll('.hello')[0].innerHTML = '바보';
   document.querySelectorAll('.hello')[1].innerHTML = '바보';
   document.querySelectorAll('.hello')[2].innerHTML = '바보';

- $('.hello').html('바보'); => 전부 다 찾아준다 ㄷㄷ

Q. 이벤트 리스너는?

    <button id = "test-btn">버튼</button>

-document.querySelector('#test-btn').addEventListener() 여기서

- $('#test-btn').on('click', function(){  }) => .on으로 바뀜


- $('셀렉터') 로 찾으면 jQuery함수만 붙일 수 있음


----------------------------------------------------------------------------------------------------

[ 모달창 만들기와 간단한 애니메이션 ]

- UI에 애니메이션 추가하려면 : 가능하면 CSS만으로 처리하는게 좋음 (성능 때문)

- one-way UI 애니메이션 만드는법 ( a상태 -> b상태 )
1. 시작스타일 2. 최종스타일 3. 원할때 최종스타일로 변하라고 코드 짬 4. 시작 스타일에 transition 추가

- 애니메이션 줄때는 display:none 보다 visibility: hidden을 사용
- display는 html에서 아예 없애는거, visibility는 모습만 숨기는거

----------------------------------------------------------------------------------------------------

[ 폼 만들며 배워보는 if else ]

- form 안에 button 주의 : 전송은 무조건 type = "submit" 닫기는 type="button"을 해야 에러가없음
- form은 서버로 유저정보 전송하려고 쓰는 것임
- 전송버튼 누를때 첫째 <input>에 입력된게 없으면 alert 띄우기

- 폼 전송 막으려면 e.preventDefault()


----------------------------------------------------------------------------------------------------

[ input, change 이벤트와 and, or 연산자 ]


- <input> 에서 발생하는 이벤트들 : input, change
- <input>에서 일어나는 input 이벤트
: document.getElementById('email').addEventListener('input'l,function(){})
: document.getElementById('email') 여기에 유저가 입력한 값이 변할 때마다 실행됨

-change 이벤트는 <input>에 입력한 값이 바뀌고 포커스를 잃을 때 발생

--------------------------------------------------------------------------------------------------

[ 변수 문법과 Dark mode 버튼만들기 ]

- 자료 잠깐 저장하는 변수 문법 
: var 변수명 = 넣을자료;

- 변수 왜쓰는데
1. 길고 복잡한 자료들 저장가능
2. 특정값을 기억하게 만들고 싶으면

- 모든 자료 다 넣을수있음

- bootstrap UI 들은 스타일 바꾸려면 class명 수정해야함

- 변수의 선언, 할당, 범위 : var 이름 = 'kim';


- 선언 : var 이름;
- 할당 : 이름 = 'kim';
- 재할당 : 이름 = 'park';

- 범위 
: 함수 안에서 변수를 만들면 사용가능 범위는 함수 내부
: 함수 바깥에서 만든 변수는 함수 안에서 사용가능
: var let const

- var let const 차이
: var => 재선언 가능, 재할당 가능. 범위 function
: let => 재선언 불가능. 재할당 가능 . 범위 {}
: const => 재선언 불가능. 재할당 불가능 (변하면 안되는 값 보관좋음) . 범위 {}

-----------------------------------------------------------------------------------------------------

[setTimeout 타이머 주는법 ]




